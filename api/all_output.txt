Let's start by creating the necessary files and directories for our project. We will need a `prisma` directory for our Prisma schema, a `src` directory for our source code, and a `package.json` file for our Node.js dependencies.

package.json
```
{
  "name": "graphql-apollo-prisma",
  "version": "1.0.0",
  "description": "A GraphQL API using Apollo and Prisma",
  "main": "src/index.js",
  "scripts": {
    "dev": "nodemon src/index.js",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev"
  },
  "dependencies": {
    "apollo-server": "^2.25.2",
    "graphql": "^15.5.0",
    "prisma": "^2.23.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^8.5.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.7"
  }
}
```

prisma/schema.prisma
```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  votes     Vote[]
  recipes   Recipe[]
}

model Recipe {
  id          Int      @id @default(autoincrement())
  name        String
  ingredients String[]
  steps       String
  voteCount   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  votes       Vote[]
}

model Vote {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId Int
  type     VoteType
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
```

src/index.js
```
const { ApolloServer } = require('apollo-server');
const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const resolvers = require('./resolvers');

const prisma = new PrismaClient();

const server = new ApolloServer({
  typeDefs: fs.readFileSync(
    path.join(__dirname, 'schema.graphql'),
    'utf8'
  ),
  resolvers,
  context: ({ req }) => {
    return {
      ...req,
      prisma,
    };
  },
});

server
  .listen()
  .then(({ url }) =>
    console.log(`Server is running on ${url}`)
  );
```

src/schema.graphql
```
type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  votes: [Vote!]!
  recipes: [Recipe!]!
}

type Recipe {
  id: ID!
  name: String!
  ingredients: [String!]!
  steps: String!
  voteCount: Int!
  user: User!
  votes: [Vote!]!
}

type Vote {
  id: ID!
  user: User!
  recipe: Recipe!
  type: VoteType!
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

type Query {
  users: [User!]!
  recipes: [Recipe!]!
  votes: [Vote!]!
}

type Mutation {
  createUser(email: String!, username: String!, password: String!): User!
  createRecipe(name: String!, ingredients: [String!]!, steps: String!, userId: Int!): Recipe!
  createVote(userId: Int!, recipeId: Int!, type: VoteType!): Vote!
  updateUser(id: Int!, email: String, username: String, password: String): User!
  updateRecipe(id: Int!, name: String, ingredients: [String!], steps: String, userId: Int): Recipe!
  updateVote(id: Int!, userId: Int, recipeId: Int, type: VoteType): Vote!
  deleteUser(id: Int!): User!
  deleteRecipe(id: Int!): Recipe!
  deleteVote(id: Int!): Vote!
}
```

src/resolvers.js
```
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const resolvers = {
  Query: {
    users: async (_, __, { prisma }) => {
      return prisma.user.findMany();
    },
    recipes: async (_, __, { prisma }) => {
      return prisma.recipe.findMany();
    },
    votes: async (_, __, { prisma }) => {
      return prisma.vote.findMany();
    },
  },
  Mutation: {
    createUser: async (_, { email, username, password }, { prisma }) => {
      const hashedPassword = await bcrypt.hash(password, 10);
      const user = await prisma.user.create({
        data: {
          email,
          username,
          password: hashedPassword,
        },
      });
      return user;
    },
    createRecipe: async (_, { name, ingredients, steps, userId }, { prisma }) => {
      const recipe = await prisma.recipe.create({
        data: {
          name,
          ingredients,
          steps,
          userId,
        },
      });
      return recipe;
    },
    createVote: async (_, { userId, recipeId, type }, { prisma }) => {
      const vote = await prisma.vote.create({
        data: {
          userId,
          recipeId,
          type,
        },
      });
      return vote;
    },
    updateUser: async (_, { id, email, username, password }, { prisma }) => {
      const user = await prisma.user.update({
        where: { id },
        data: {
          email,
          username,
          password,
        },
      });
      return user;
    },
    updateRecipe: async (_, { id, name, ingredients, steps, userId }, { prisma }) => {
      const recipe = await prisma.recipe.update({
        where: { id },
        data: {
          name,
          ingredients,
          steps,
          userId,
        },
      });
      return recipe;
    },
    updateVote: async (_, { id, userId, recipeId, type }, { prisma }) => {
      const vote = await prisma.vote.update({
        where: { id },
        data: {
          userId,
          recipeId,
          type,
        },
      });
      return vote;
    },
    deleteUser: async (_, { id }, { prisma }) => {
      const user = await prisma.user.delete({
        where: { id },
      });
      return user;
    },
    deleteRecipe: async (_, { id }, { prisma }) => {
      const recipe = await prisma.recipe.delete({
        where: { id },
      });
      return recipe;
    },
    deleteVote: async (_, { id }, { prisma }) => {
      const vote = await prisma.vote.delete({
        where: { id },
      });
      return vote;
    },
  },
};

module.exports = resolvers;
```

This concludes a fully working implementation.