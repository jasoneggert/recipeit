type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  votes: [Vote!]!
  recipes: [Recipe!]!
}

type Recipe {
  id: ID!
  name: String!
  ingredients: [String!]!
  steps: String!
  userId: Int!
  votes: [Vote]!
  comments: [Comment]
}

type Comment {
  id: ID!
  text: String!
  userId: Int!
}

type Vote {
  id: ID!
  user: User!
  recipe: Recipe!
  type: VoteType!
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

type Query {
  users: [User!]!
  user(id: ID!): User
  recipes: [Recipe!]!
  recipe(id: ID!): Recipe
  votes: [Vote!]!
  comments: [Comment]!
}

type Mutation {
  createUser(email: String!, username: String!, password: String!): User!
  createRecipe(
    name: String!
    ingredients: [String!]!
    steps: String!
    userId: Int!
  ): Recipe!
  createVote(userId: Int!, recipeId: Int!, type: VoteType!): Vote!
  createComment(recipeId: Int!, text: String!, userId: Int!): Comment!
  updateUser(id: Int!, email: String, username: String, password: String): User!
  updateRecipe(
    id: Int!
    name: String
    ingredients: [String!]
    steps: String
    userId: Int
  ): Recipe!
  updateVote(id: Int!, userId: Int, recipeId: Int, type: VoteType): Vote!
  deleteUser(id: Int!): User!
  deleteRecipe(id: Int!): Recipe!
  deleteVote(id: Int!): Vote!
  deleteComment(id: Int!): Comment!
}
